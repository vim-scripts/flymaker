*flymaker.txt*	For Vim version 7.0	Last change: 2012 February 8
*flymaker*	Another GNU Flymake-like plugin for Vim.

============================================================================
CONTENTS                                                 *flymaker-contents*

    1.Introduction................................|flymaker-introduction|
    2.Requirements................................|flymaker-requirements|
    3.Installation................................|flymaker-install|
    4.Configuration...............................|flymaker-config|
    5.Support.....................................|flymaker-support|
    6.Known Issues................................|flymaker-issues|
    7.Changelog...................................|flymaker-changelog|

============================================================================
1. Introduction                                      *flymaker-introduction*

GNU Flymake allows Emacs users to perform compilation, static analysis, and
other tools in the background as they develop.  Upon each save, a
background process is kicked off to perform the checking.  If errors are
identified, the lines containing the error are highlighted and a tooltip
provides the error message.  This is very well-suited to feature development
where the developer spends a lot of time in a single buffer.

I can see the value in this fast-paced workflow but I don't use Emacs.
There have been a few attempts to bring this functionality to Vim but each
of them seem to have their limitations.  This plugin attempts to overcome
them.

I don't expect that this is a comprehensive list of alternatives but there
are 3 worth mentioning here:

    1) vim-flymake

    This plugin just has too many limitations.

    First, it attempts to copy your files into a temporary directory and
    build them there.  This not only sounds unessisarily ineffient but it
    also imposes restrictions on interdependancies in your codebase.  For
    example, my Makefile had an include directive with a relative path
    which breaks when you move it somewhere else.  Maybe that's a bad
    practice on my part but I'll be damned if a Vim plugin is going to tell
    me how to structure my code!

    Another limitation was that the error format was painful to get right,
    particularly if you wanted to support multiple formats.  I have already
    spent enough time working on an appropriate &errorformat used by the
    quickfix list--why not just use that?!.

    2) pylint.vim

    I'll admit that I didn't even try it out.  I did, however, take a good
    look at the plugin.  This one is more configurable but still not
    generic enough to be "all purpose."  This one also only uses the
    quickfix list to report errors.

    3) AsyncCommand

    If there ever was a plugin that I found inspiring, this is it.  The
    AsyncMake command that this plugin provides is configurable via makeprg
    and uses the quickfix list to report errors.  If you want to also
    support using the quickfix list-approach for some workflows, I
    recommend installing this plugin and adding something like this
    in your ftplugin/cpp directory:

    if has("autocmd")
        autocmd BufWritePost <buffer> :AsyncMake
    endif

    In this example, AsyncMake will be kicked off after saving a cpp file.
    You're free to configure a different makeprg and set it up for any
    filetype.  If there are errors, the quickfix list will be displayed.

    The drawbacks with this plugin are that it does not support the
    flymake-like line highlighting and error balloons.  Initially, I wanted
    to require AsyncCommand and extend it to provide this capability but I
    ran into a few issues that has basically led me to clone a few key
    functions in order to get the job done.  I will attempt to work with
    the author of AsyncCommand to get the appropriate hooks (and bug fixes)
    incorporated such that this plugin can simply use its API.  Or perhaps
    we can merge plugins?

So, what I have done is wrote this plugin using those three examples for
ideas, inspiration, and even some implementation.  The plugin uses the
quickfix list but leaves it hidden unless the user explicitly opens it.
The erroneous lines are highlighted in the Error highlight group and in
GUI sessions balloons are toggled on when there are errors being displayed.
They're toggled back off on clean builds because the balloons are rather
slow.

Of course, this plugin has its shortcommings as well.  See the
|flymaker-issues| section of the documentation for a list of known issues
and outstanding work-items.

I wanted a catchy name--something that is immediately recognized as a
flymake-like plugin but something that differentiates it from the other
alternatives.  FlyMaker is all I could come up with.  Meh.

See the |flymaker-install| and |flymaker-config| sections of the
documentation about installing and configuring Flymaker!

============================================================================
2. Requirements                                      *flymaker-requirements*

This plugin requires Vim 7.0+, compiled with the |+autocmd|,
|+balloon_eval|, and |+clientserver|| options.  Check your vim version with
|:version|.

This plugin requires the AsyncCommand 3.1 plugin.

In order to use the client-server feature (that enables background
compilation), in console Vim, a servername must be specified on the
command line.  (GUI Vim does this implicitly so it should "just work.")
What I prefer to do is just set up an alias that appens " --servername VIM"
like so (example is in bash):

    alias vim='vim --servername VIM'

Although not required, I recommend always using pathogen.vim!

============================================================================
3. Installation                                           *flymaker-install*

Extract the tarball into your ~/.vim directory or, if you are using
pathogen.vim, a ~/.vim/bundle/flymaker directory.

Note that by default, an ftplugin for C++ will be installed (but not turned
on).  It likely needs further configuration before meeting your specific
needs.

============================================================================
4. Configuration                                           *flymaker-config*

In the plugin's ftplugin/cpp directory, you'll find a flymaker.vim file
that configures the autocmd for the cpp filetype.  It should look something
like this:

    " blah blah blah read this doc first :P

    "setlocal makeprg=make
    if has("autocmd")

        " Uses quickfix list notifications
        "autocmd BufWritePost <buffer> :AsyncMake

        " Uses flymake-like notifications
        autocmd BufWritePost <buffer> :AsyncFlyMake

    endif

In order to enable this for a different filetype, you can copy this file
into an appropriate ftplugin filetype directory.  You will likely need to
update the local makeprg for this, as well.

Note that makeprg can be anything.  It does not have to be a compiler!  The
possibilities are virtually endless, as long as the command provides output
in a format that can be parsed by the &errorformat.  For example, you could
even wrap multiple commands (compile, lint, etc.) in a shell script and
use the output of all of them!

Let's say that we want to use gcc on C files.  Here our makeprg is going to
be gcc but we also have to add the filename as a parameter.

To do this I've created my ~/.vim/bundle/flymaker/ftplugin/c/flymaker.vim
as follows:

    setlocal makeprg=gcc
    if has("autocmd")

        " Uses flymake-like notifications
        autocmd BufWritePost <buffer> :AsyncFlyMake %

    endif

This will invoke "gcc FILENAME.c" in the background and report the errors,
which should already be parsible via the default &errorformat.

When an error shows up, you may open the quickfix list via |:copen| to
see any additional context not covered in the tooltip.  If the quickfix
list does not parse your compilers messages appropriately, you need to
update your &errorformat.

If you know there are errors but they do not becoming highlighted
automatically, it is likely that your &errorformat is inadequate.  The
plugin relies on a line number being identified via the &errorformat, and
the balloons contain the message text.  See :help errorformat for more
information.

By default, the plugin is turned off.  It is turned on when g:FlymakerOn
is 1.  It can be set in $VIMHOME/.vimrc with let, for example:

    let g:FlymakerOn = 1

Or explicitly turned on or off via |:FlyOn| or |:FlyOff|, and there is
also a |:FlyToggle|.

Additionally, if g:FlymakerMenu is 1 when the plugin is sourced, for
example:

    let g:FlymakerMenu = 1

A Flymaker menu will also be added with On and Off items.  This is
generally useful in GUI Vim but it can also be accessed via |:emenu|.

============================================================================
5. Support                                                *flymaker-support*

Feel free to send questions, comments, suggestions, concerns, patches, bug
reports, success stories, funny stories, and dirty jokes to me, Chad Moore,
via my contact information published on vim.org:

http://www.vim.org/account/profile.php?user_id=19160

============================================================================
6. Known Issues                                            *flymaker-issues*

This plugin, particularly the early versions, do have a number of
limitations.  I wanted to get it out here in the public domain sooner rather
than later.

Here are some of the current TODOs:

* When the quickfix list is open, the plugin closes it.  clearmatches()
  does not seem to work when the list is open.

* When the quickfix list is opened, the cursor jumps into the buffer if
  it is in the quickfix list when a build returns.

* The plugin needs tested with multiple buffers, multiple tabs, split
  windows, etc..

* I'd like to include more examples than just C++ using the default
  makeprg.  For example, what about GCC, Clang static analysis, or
  Pylint?

* When an error is identified, it's highlighted by the text of the current
  line that contains the error.  This means that if a duplicate line exists,
  in the same buffer, it will also be highlighted and also have a tooltip.

* In console Vim (no GUI), when an error is either highlighted or a previous
  highlight is cleared, the cursor disappears until it is moved again.

============================================================================
7. Changelog                                            *flymaker-changelog*

0.2.0
    - FIXED: If the quickfix list is open, the errors are only highlighted
             in the buffer if the cursor is in the quickfix list.  If it is
             left in the buffer that was saved, the quickfix list updates
             but the highlighting does not appear.

             Highlighting should now occur even when the quickfix list is
             open.

    - FIXED: The script contains a lot of (slightly modified) AsyncCommand
             functions.  I need to find a better strategy for interoperation.

             The script now requires AsyncCommand 3.1.  After the next
             version of AsyncCommand is released, the bug fixes included
             with this script can be removed.

    - Match text is now escaped to match lines containing regex
      metacharacters.

    - In Vim versions < 7.2, without matchadd, match will be used rather
      than requiring 7.2+.

0.1.3
    - FIXED: Time needs spent on testing/fixing the implications of
             having multiple buffers open during the build.  Specifically,
             as of the initial release, you have to be in the same buffer
             as an error for it to be highlighted.  I think this can be
             made smarter.

             The plugin should now be able to highlight in multiple buffers,
             although it still needs a lot of testing.  At least one
             issue still exists when the quickfix list is open and the
             cursor is not in it.

    - FIXED: Only when the compilation is free of errors does the plugin
             clear all matches.  As a result, if you fix an error and
             introduce a different one before recompilation, some of the
             outdated highlights remain.

             Matches are now cleared before matching new errors.  For Vim
             versions >= 702, only matches added by the plugin will be
             cleared.

    - FIXED: Only the last error for a given line is displayed in tooltip
             when multiple errors are listed for a single line.  It should
             include them all.

             Additional errors for the same line are now appended to
             existing tooltips.

0.1.2
    - FIXED: Undefined variable errors upon sourcing the plugin unless
             g:FlymakerMenu and g:FlymakerOn were explicitly set by the
             user.

             If not defined, both options are not explicitly set to their
             default values when the plugin is sourced.  Internally, the
             plugin is now safe to assume that they are always set (to
             something).

    - FIXED: Now that errors are highlighted by the erroneous text, after
             inserting lines causes the highlights to shift, the balloons
             remain on the original line only.

    - FIXED: The balloonexpr function is terribly slow.  I think we can
             speed this up by collecting the data as we iterate the
             quickfix list to perform highlighting.  Perhaps creating a
             dict here would provide faster lookup for specific error
             messages.

             The fix for both of these was to store a dictionary of
             line text to error message when processing the quickfix list.
             Now the tooltips are looked (efficiently) up by the text
             under the cursor rather than by line number.

    - FIXED: Requires Vim 7.2 for matchadd.  The plugin now only uses
             matchadd if it is available and falls back to using match.

             Version tests were added such that if Vim is < 700, the
             plugin (silently) does not load.  If the version is < 702,
             match is used for highlighting.  Otherwise, matchadd is
             used.

    - Added a blurb to the documentation about specifying a servername on
      the command line for console Vim.

0.1.1
    - FIXED: When an error is highlighted in the current buffer, inserting
             text above the error may shift the text down but the
             highlighted remains on the same line number, independent of
             the actual error that has moved.  The text also remains
             highlighted as it is being edited.

      Rather than matching via line number, the plugin now matches the
      erroneous text at the line.  This allows the highlight to shift
      along with the text but comes at the expense of possibly highlighting
      false alarms if the text of an error is duplicated elsewhere in the
      buffer.

    - FIXED: With errors highlighted, navigating to a different buffer does
             not clear the previous matches.

      A BufLeave autocmd was added to clear existing matches.

    - FIXED: A way to toggle flymake mode on and off is desirable.

      The plugin is now turned on when g:FlymakerOn is 1.  It can be set
      in $VIMHOME/.vimrc with let, explicitly turned on or off via
      :FlyOn or :FlyOff, and there is also a :FlyToggle.

      If g:FlymakerMenu is 1 when the plugin is sourced, a Flymaker menu
      will also be added with On and Off items.

    - FIXED: In GUI Vim, something is causing GTK errors to be dumped into
             the terminal from which it was invoked.

      This was reproduced without this plugin installed.  Although I have
      no explanation for what exactly is happening, I do not think the
      plugin is suspect.

    - Migrated from using match to matchadd.

0.1.0
    - Initial beta version.

============================================================================

vim:tw=75:ts=8:ft=help
